#!/home/yj/.virtualenvs/py3.5.3/bin/python3.5
# -*- coding: utf-8 -*-

"""单元测试是用来对一个模块、一个函数或者一个类进行正确性检验的测试工作"""

"""比如对函数abs()可以编写出以下几个测试用例："""
# 输入正数，比如1、1.2、0.99，期待返回值与输入相同
# 输入负数，比如-1、-1.2、-0.99，期待返回值与输入相反
# 输入0，期待返回0
# 输入非数值类型，比如None、[]、{}，期待抛出TypeError
'''把上面的测试用例放到一个测试模块里，就是一个完整的单元测试'''


"""
单元测试通过，说明测试的这个函数能够正常工作
单元测试不通过，要么函数有bug，要么测试条件输入不正确，需要修复使单元测试通过
"""

"""单元测试通过后的意义：
    如果对abs()函数代码做了修改，只需要再跑一遍单元测试
        如果通过，说明修改不会对abs()函数原有的行为造成影响
        如果测试不通过，说明修改与原有行为不一致，要么修改代码，要么修改测试
这种以测试为驱动的开发模式最大的好处是确保一个程序模块的行为符合设计的测试用例
在将来修改的时候，可以极大程度地保证该模块行为仍然是正确的
"""

"""运行单元测试：
1、运行单元测试最简单的运行方式是在测试用例的最后加上两行代码：
    if __name__ == '__main__':
        unittest.main()
    这样就可以把测试用例当做正常的Py脚本运行

2、另一种方法是在命令行通过参数-m unittest直接运行单元测试：
    $ python3 -m unittest mydict_test
    .....
    ----------------------------------------------------------------------
    Ran 5 tests in 0.000s

    OK
这是推荐的做法，因为这可以一次批量运行很多单元测试，并且有很多工具可以自动运行这些单元测试
"""



"""编写一个Dict类，行为和dict一致，但可以通过属性访问"""
# mydict.py
'''编写单元测试，需要导入unittest模块'''
# mydict_test.py


"""setUp与tearDown"""
'''可以在单元测试中编写两个特殊的setUp()和tearDown()方法，这两个方法在每调用一个测试方法的前后分别执行'''
'''setUp()和tearDown()方法的作用：
设想测试需要启动一个数据库，就可以在setUp()方法中连接数据库，在tearDown()方法中关闭数据库
这样，不必在每个测试方法中重复相同的代码'''
# mydict_test.py



"""小结：
单元测试可以有效地测试某个程序模块的行为，是未来重构代码的信心保证
单元测试的测试用例要覆盖常用的输入组合、边界条件和异常
单元测试代码要非常简单，如果测试代码太复杂，那么测试代码本身就可能有bug
单元测试通过了并不意味着程序就没有bug了，但不通过程序肯定有bug
"""