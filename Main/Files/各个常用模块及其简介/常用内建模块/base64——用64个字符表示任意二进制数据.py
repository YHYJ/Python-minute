#!/home/yj/.virtualenvs/py3.5.3/bin/python3.5
# -*- coding: utf-8 -*-

"""base64是一种用64个字符来表示任意二进制数据的方法
用记事本打开exe、jpg、pdf这些文件时会看到一大堆乱码-
-因为二进制文件包含很多无法显示和打印的字符-
-如果要让记事本这样的文本处理软件能处理二进制数据-
-就需要一个二进制到字符串的转换方法
base64是一种最常见的二进制编码方法"""


import base64

# base64的原理
'''首先准备一个64个字符的数组'''
shuzu = ['A', 'B', 'C', ..., 'a', 'b', 'c', ..., '0', '1', ..., '+', '/']
'''然后对二进制数据进行处理，每3个字节一组，一共是3x8=24bit
划为4组，每组正好6个bit'''
'''这样得到4个数字作为索引，然后查表，获得相应的4个字符，就是编码后的字符串
Base64编码会把3字节的二进制数据编码为4字节的文本数据，长度增加33%-
-好处是编码后的文本数据可以在邮件正文、网页等直接显示'''
'''如果要编码的二进制数据不是3的倍数，最后会剩下1个或2个字节怎么办？
base64用\x00字节在末尾补足后，再在编码的末尾加上1个或2个=号-
-表示补了多少字节，解码的时候会自动去掉'''


# Py内置的base64可以直接进行base64的编解码
base = base64.b64encode(b'binary\x00string')
debase = base64.b64decode(b'YmluYXJ5AHN0cmluZw==')
print(base)
print(debase)


# 标准的base64编码后可能出现字符+和/，在URL中就不能直接作为参数
'''有一种"url safe"的base64编码，其实就是把字符+和/分别变成-和_'''
print(base64.b64encode(b'i\xb7\x1d\xfb\xef\xff'))
print(base64.urlsafe_b64encode(b'i\xb7\x1d\xfb\xef\xff'))
print(base64.urlsafe_b64decode(b'abcd--__'))


'''可以自己定义64个字符的排列顺序，这样就可以自定义base64编码，通常情况下没有必要'''

'''base64是一种通过查表的编码方法，不能用于加密，即使使用自定义的编码表也不行'''

'''base64适用于小段内容的编码，比如数字证书签名、Cookie的内容等'''


# 很多base64编码后会把=去掉
'''由于=字符也可能出现在base64编码中，但=用在URL、Cookie里面会造成歧义'''
# 'abcd' -> 'YWJjZA=='  标准base64
# 'abcd' -> 'YWJjZA'    自动去掉=
'''去掉=后怎么解码呢？
因为Base64是把3个字节变为4个字节，所以，Base64编码的长度永远是4的倍数
因此，只要加上=把Base64字符串的长度变为4的倍数，就可以正常解码了'''
