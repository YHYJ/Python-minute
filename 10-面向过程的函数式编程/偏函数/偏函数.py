#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""functools.partial偏函数的作用:

将一个函数的某些参数固定住,返回一个新的函数,调用这个新函数会更简单
功能总结 ——
    重复使用一个函数,参数为A(非默认参数),每次都要指定参数太麻烦-
    -重新定义一个这个函数的偏函数,将参数A设定为这个偏函数的默认值方便使用-
    -原函数参数不受影响
"""

import functools        # functools模块提供偏函数(Partial function)


"""通过设置函数默认参数可以降低函数调用的难度，偏函数也可以做到，例如："""
# int()函数可以把字符串转换为整数，还提供额外的base参数指定要转换的字符串的初始进制：
print('十转十:',int('123456'))            # 仅传入字符串时int()默认初始进制为十
print('八转十:',int('123456',base=8))     # 初始为八进制，转换为十进制
print('十六转十:',int('123456',base=16))    # 初始为十六进制，转换为十进制
print('二转十:',int('01101',base=2))      # 初始为二进制，转换为十进制


print("*"*25 + "定义偏函数" + "*"*25)

"""假设要转换大量的二进制字符串，每次都传入int(x, base=2)非常麻烦"""
# 定义一个int2()函数，默认把base=2传进去，int2就是一个偏函数：
def int2(x,base=2):
    """二进制转换函数"""
    print('自定义int2二转十函数:',int(x,base))
int2('1110101010111100')

""""functools.partial用来创建偏函数,不需要自己定义int2()"""
# 可以直接使用下面的代码创建一个新的函数int_two：
int_two = functools.partial(int,base=2)     # 把base参数重新设定默认值为2
print(int_two('1000000'))                   # 使用base的默认值
print(int_two('123',base=10))               # 也可以指定其他参数值

#小结：
# 当函数的参数个数太多，需要简化时，使用functools.partial可以创建一个新的函数
# 这个新函数可以固定住原函数的部分参数，从而在调用时更简单