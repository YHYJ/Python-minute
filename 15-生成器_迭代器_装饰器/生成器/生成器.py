#!/home/yj/.virtualenvs/py3.6.2/bin/python
# -*- coding: utf-8 -*-

"""生成器(generator) —— 一边循环一边计算的算法机制，生成器是可迭代对象

列表生成式可以直接创建一个列表
但——
    受到内存限制，列表容量有限
    包含100万个元素的列表占用巨额内存-
    -如果仅需访问前几个元素，更会浪费内存
    
    如果列表元素可以按照某种算法推算出来-
    -就可以在循环的过程中不断推算出后续元素-
    -这就不必创建完整的list，从而节省大量内存
在Py中，这种一边循环一边计算的机制称为生成器（generator），生成器定义的是算法
每次调用next()，才计算出下一个元素的值，直到计算到最后一个元素
没有更多的元素时，也抛出StopIteration的错误。
"""

print("*"*25 + "一、创建生成器的方法" + "*"*25)

# 1、直接将列表生成式的[]改为()：
L = [x*x for x in range(10)]
print(L)
G = (x*x for x in range(10))
print(G)            # 输出显示创建了<generator...>生成器G
for g in G:
    print(g)        # 调用生成器的元素用for循环，也可以用next()方法
# >>>生成器函数.py


print("*"*25 + "二、生成器的工作原理" + "*"*25)

"""生成器的工作原理：

它是在for循环的过程中不断计算出下一个元素，
并在适当的条件结束for循环
对于生成器函数来说，遇到return语句或者执行到函数体最后一行语句，
就是结束生成器函数的指令，for循环随之结束

"""
