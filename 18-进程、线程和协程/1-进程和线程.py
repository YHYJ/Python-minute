#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""现代操作系统如OS X，UNIX，Linux，Windows等都支持 “多任务” """

"""多任务：
简单来说就是操作系统可以同时运行多个任务
比如一边在用浏览器上网，一边在听MP3，一边在用Word赶作业，这就是多任务
至少同时有3个任务正在运行，还有很多任务悄悄地在后台同时运行着，只是桌面上没有显示
"""

"""单核CPU也可以执行多任务：
CPU执行代码都是顺序执行的，操作系统轮流让各个任务交替执行
任务1执行0.01秒，切换到任务2，任务2执行0.01秒，再切换到任务3，执行0.01秒……
这样反复执行下去。虽然每个任务都是交替执行的
但由于CPU的执行速度实在太快，感觉就像所有任务都在同时执行一样
"""

"""真正的并行执行多任务只能在多核CPU上实现
但由于任务数量远远多于CPU的核心数量
所以操作系统也会自动把很多任务轮流调度到每个核心上执行
"""

"""进程（Process）
对于操作系统来说，一个任务就是一个进程（Process）
比如打开一个浏览器就是启动一个浏览器进程
打开一个记事本就启动了一个记事本进程
打开两个记事本就启动了两个记事本进程
打开一个Word就启动了一个Word进程
"""

"""线程（Thread）
有些进程不止同时干一件事，比如Word可以同时进行打字、拼写检查、打印等
在一个进程内部，要同时干多件事，就需要同时运行多个“子任务”
进程内的这些“子任务”称为线程（Thread）
"""

"""一个进程至少有一个线程
每个进程至少要干一件事，所以一个进程至少有一个线程
当然，像Word这种复杂的进程可以有多个线程
多个线程可以同时执行，多线程的执行方式和多进程是一样的-
-也是由操作系统在多个线程之间快速切换，让每个线程都短暂地交替运行
"""

"""同时执行多个任务的三种方案：
前面编写的所有的Py程序都是执行单任务的进程，也就是只有一个线程
如果要同时执行多个任务，有三种解决方案：
一是启动多个进程，每个进程虽然只有一个线程，但多个进程可以一块执行多个任务

二是启动一个进程，在一个进程内启动多个线程，这样，多个线程也可以一块执行多个任务

三是启动多个进程，每个进程再启动多个线程，这样同时执行的任务就更多了，这种模型太复杂，实际很少采用
"""

"""多任务的实现有3种方式：
多进程模式；
多线程模式；
多进程+多线程模式
同时执行多个任务通常各个任务之间并不是没有关联的，而是需要相互通信和协调
有时，任务1必须暂停等待任务2完成后才能继续执行
有时，任务3和任务4不能同时执行
所以，多进程和多线程的程序的复杂度要远高于前面写的单进程单线程的程序
"""

"""
Python既支持多进程，又支持多线程
"""

"""
线程是最小的执行单元，而进程由至少一个线程组成。如何调度进程和线程，完全由操作系统决定，程序自己不能决定什么时候执行，执行多长时间

多进程和多线程的程序涉及到同步、数据共享的问题，编写起来更复杂
"""

"""多线程和多进程最大的不同在于：
多进程中，同一个变量各自有一份拷贝存在于每个进程中，互不影响
多线程中，所有变量由所有线程共享，所以，任何一个变量都可以被任何一个线程修改
因此，线程之间共享数据最大的危险在于多个线程同时改一个变量，把内容给改乱了
"""
