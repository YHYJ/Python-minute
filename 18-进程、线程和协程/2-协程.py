#!/home/yj/.virtualenvs/py3.6.2/bin/python
# -*- coding: utf-8 -*-

"""
Author: YJ1516 - YJ1516268@outlook.com
Date: 2017-09-23 19:46:33
Last modified: 2017-09-23 19:46:33
Python release: 3.6.2

协程(Coroutine)：又名微线程、纤程，sh是Py中另外一种实现多任务的方式
但占用的执行单元(资源)比线程要少
协程是一个执行单元，因为它自带CPU上下文，这样只要在合适的时机，可以把一个协程中断而执行另一个协程，只要这个过程中保存或恢复CPU上下文则程序照常运行
"""


"""子程序或者称为函数在所有语言中都是层级调用，比如A调用B，B调用C
C执行完毕返回，B执行完毕返回，最后A执行完毕
所以子程序调用都是通过栈实现的，一个线程就是一个子程序
子程序调用总是一个入口，一次返回，调用顺序是明确的"""


"""协程的调用和子程序的调用不同
协程看上去也是子程序，但执行过程中，在子程序内部可中断，然后转而执行别的子程序
注意！在一个子程序中中断去执行其他子程序，不是函数调用，有点类似于CPU的中断"""

def A():
    print(1)
    print(2)
    print(3)

def B():
    print('x')
    print('y')
    print('z')
'''A()、B()两个函数假设由协程执行，在执行A过程中，遇到需要CPU等待的情况
可以随时中断A去执行B，B也可能在执行过程中中断再去执行A，
中断时子程序的CPU上下文被保存，恢复运行时恢复该协程的CPU上下文'''


"""协程的执行结果有点像多线程，但协程是在一个线程上执行的
协程的优点：
    1、协程具有极高的执行效率，因为子程序切换不同于线程切换，是由程序自身控制的
    因此没有线程切换的开销，和多线程比，线程数量越多，协程的性能优势就越明显
    2、协程不需要线程的锁(Lock)机制，因为只有一个线程，也不存在同时写变量的冲突
    在协程中控制共享资源不加锁，只需判断资源状态，所以执行效率比线程高很多
协程的缺点：
    无法利用多核实现多任务"""


"""协程利用多核CPU的方案：
多进程+协程，既充分利用多核，又充分发挥协程的高效率，可获得极高的性能"""

