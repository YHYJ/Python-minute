#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""前三篇的特殊符号如【\b、\d、.、\S、*】等叫做元字符"""

import re


text = 'Hi,i am Shirley Hilton.I am his wife.'

"""常用元字符"""


#【.】————匹配除换行符以外的任意 【一个】 字符，包括空格
'''
'py.'可以匹配'pyc'...'pyo'...'py3'...
'''
m = re.findall(r"i.",text)  # i. 表示匹配i和它后面一个字符，仅仅不包括换行符
n = re.findall(r".",text)   # . 表示匹配所有除换行符外的字符、空格、标点
print(m)
print(n)

#【^】————匹配字符串的开始
# 组合：[a]的反义是[^a]，表示除a以外的任意字符。[^abcd]就是除abcd以外的任意字符

#【$】————匹配字符串的结束

#【*】————前面的一个字符重复任意次（包括0次）
#【+】————前面的一个字符重复最小为1次
#【?】————前面一个字符重复0或1次
#【{num}】————重复一个字符指定的num次
#【{n,}】————重复n及以上次
#【{n,m}】————重复n到m次

#【\W】————匹配任意不是字母、数字、下划线或汉字的字符
#【\w】————匹配字母、数字、下划线或汉字（匹配汉字适用于3.x）


#【\S】————匹配不是空白符的任意字符
x = re.findall(r"\S",text)
print(x)
#【\s】————匹配任意空白符


#【\D】————匹配任意非数字的字符
#【\d】————匹配数字
'''
'00\d'可以匹配'007',但无法匹配'00A'
'\d\d\d'可以匹配'010'...'123'...'156'...
'''

#【\B】————匹配不是单词开头或结尾的位置
#【\b】————匹配单词的开头或结尾，即空格、标点、换行……



"""正则表达式不只用来从一大段文字中抓取信息，也用来判断输入的文本是否符合规范，或进行分类。例子："""
# ^\w{4,12}$
'''表示一段4到12位的字符，包括字母或数字或下划线或汉字，可以用来作为用户注册时检测用户名的规则'''
# \d{15,18}
'''表示15到18位的数字，可以用来检测身份证号码'''
# ^1\d*[x]?
'''以1开头的一串数字，数字结尾有字母x，也可以没有。有的话就带上x'''


# 一个复杂的例子：\d{3}\s+\d{3,8}
'''
从左到右解读：
\d{3}   表示匹配3个数字，例如'010'；
\s      可以匹配一个空格（包括Tab等空白符），所以\s+表示至少有一个空格，例如' '，' '等
\d{3,8} 表示3～8个数字，例如'1234567'
上面的正则表达式可以匹配以任意个空格隔开的带区号的电话号码
'''


"""练习：从下面一段文本中，匹配出所有s开头，e结尾的单词"""
txt = "site sea sue sweet see case sse ssee loses"
n = re.findall(r"\bs\S*e\b",txt)    #为什么不加?就已经是懒惰匹配
m = re.findall(r"\bs\S*?e\b",txt)
print(n)
print(m)
